import{_ as n,c as s,o as a,a as t}from"./app.61bf2141.js";const f='{"title":"Rendering","description":"","frontmatter":{},"headers":[{"level":2,"title":"Fusion Structure Prototypes","slug":"fusion-structure-prototypes"}],"relativePath":"guide/essentials/rendering.md"}',p={},o=t(`<h1 id="rendering" tabindex="-1">Rendering <a class="header-anchor" href="#rendering" aria-hidden="true">#</a></h1><div class="info custom-block"><p class="custom-block-title">Content</p><p>What can you achieve? Try to create a metaphor for what is possible with fusion, to improve the mental model of fusion.</p><p>This has to be easy and show it is used in the cms context.</p></div><h2 id="fusion-structure-prototypes" tabindex="-1">Fusion Structure Prototypes <a class="header-anchor" href="#fusion-structure-prototypes" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">Content</p><p>How does the data flow work? Everything is an object, It looks like JavaScript but don&#39;t be fooled, because it has no functions and is more like a JSON. Everything can be overridden.<br> props variables are only available inside the renderer key. This makes it complex to create &quot;if else / switch&quot; statements</p></div><div class="tip custom-block"><p class="custom-block-title">Idee</p><p>JS Object Vergleich machen wie sieht das in JS notation aus? was heist dieses prototypisieren? wie wird es gemerged. du hast f\xFCr jedes &quot;object property&quot; 4 M\xF6glichkeiten: <code>@if</code>, <code>@process</code>, <code>@position</code>, <code>@apply</code></p></div><div class="language-php"><pre><code><span class="token function">prototype</span><span class="token punctuation">(</span>My<span class="token operator">.</span>Package<span class="token punctuation">:</span>MyComponent<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">prototype</span><span class="token punctuation">(</span>Neos<span class="token operator">.</span>Fusion<span class="token punctuation">:</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    big <span class="token operator">=</span> <span class="token constant boolean">false</span>
    test <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span>
    renderer <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">{</span><span class="token string single-quoted-string">&#39;&lt;p&gt;&#39;</span> <span class="token operator">+</span> props<span class="token operator">.</span>test <span class="token operator">+</span> <span class="token string single-quoted-string">&#39;&lt;/p&gt;&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">big</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">renderer</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">&#39;renderer&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">value</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&lt;p&gt;&#39;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>test <span class="token operator">+</span> <span class="token string">&#39;&lt;/p&gt;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,7),e=[o];function c(u,i,l,r,k,d){return a(),s("div",null,e)}var g=n(p,[["render",c]]);export{f as __pageData,g as default};
